{"version":3,"sources":["components/idea/styles.tsx","components/idea/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","title","fontSize","body","marginTop","Idea","props","classes","Card","className","CardContent","Typography","Divider","summary","container","backgroundColor","minHeight","App","Container","maxWidth","Button","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAEaA,EAAYC,YAAW,CAChCC,KAAO,CACHC,MAAO,KAEXC,MAAO,CACHC,SAAU,SAEdC,KAAM,CACFD,SAAU,QACVE,UAAW,MCNJ,SAASC,EAAKC,GACzB,IAAMC,EAAUV,IAChB,OACI,kBAACW,EAAA,EAAD,CAAMC,UAAWF,EAAQR,MACrB,kBAACW,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYF,UAAWF,EAAQN,OAC1BK,EAAML,OAEX,kBAACW,EAAA,EAAD,MACA,kBAACD,EAAA,EAAD,CAAYF,UAAWF,EAAQJ,MAC1BG,EAAMO,W,kBCTrBhB,EAAYC,YAAW,CAC3BgB,UAAW,CACTC,gBAAiB,OACjBC,UAAW,WA2BAC,MAvBf,WACE,IAAMV,EAAUV,IAChB,OACE,kBAACqB,EAAA,EAAD,CAAWT,UAAWF,EAAQO,UAAWK,SAAS,MAChD,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,aAGA,kBAACjB,EAAD,CACEJ,MAAM,cACNY,QAAQ,kDAEV,kBAACR,EAAD,CACEJ,MAAM,gBACNY,QAAQ,wDAEV,kBAACR,EAAD,CACEJ,MAAM,wBACNY,QAAO,+FClBKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.27b9ae17.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    root : {\r\n        width: 500,\r\n    },\r\n    title: {\r\n        fontSize: '1.8em',\r\n    },\r\n    body: {\r\n        fontSize: '0.9em',\r\n        marginTop: 15,\r\n    },\r\n});","import React from 'react';\r\nimport { Card, CardContent, Typography, Divider } from '@material-ui/core';\r\nimport { useStyles } from './styles';\r\nimport { IdeaProps } from './props';\r\n\r\nexport default function Idea(props : IdeaProps) {\r\n    const classes = useStyles();\r\n    return(\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                <Typography className={classes.title}>\r\n                    {props.title}\r\n                </Typography>\r\n                <Divider />\r\n                <Typography className={classes.body}>\r\n                    {props.summary}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Idea from './components/idea';\nimport './App.css';\nimport { Container, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  container: {\n    backgroundColor: '#fff',\n    minHeight: '100vh',\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Container className={classes.container} maxWidth='md'>\n      <Button variant='contained' color='primary'>\n        Beep Boop\n      </Button>\n      <Idea \n        title='Hello World' \n        summary='A shitty program that only says \"hello world\"' \n      />\n      <Idea \n        title='Hello World 2' \n        summary='A shitty program that only says \"hello world\" twice' \n      />\n      <Idea \n        title='Hello World the Third' \n        summary={`This one isn't even a program, it just inherited the title of program from its ancestors`} \n      />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}